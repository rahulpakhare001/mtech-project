#include "cache.h"
#include <vector>

#define DO_PREF
#define LOG2_REGION_SIZE 11
#define NUM_OF_REGION_OFFSET_BITS 5
#define NUM_OF_LINES_IN_REGION 32
#define REGION_OFFSET_MASK 0x1F
#define NUM_OF_RR_ENTRIES 32				    // recent request filter entries
#define RR_TAG_MASK 0xFFF				    // 12 bits of prefetch line address are stored in recent request filter


vector<uint64_t> recent_request_filter_llc;		// to filter redundant prefetch requests 

uint64_t prefetches_made = 0, operated_count = 0, stopped_at_half_count = 0;
uint64_t prefetches_made_warmup = 0, operated_count_warmup = 0, stopped_at_half_count_warmup = 0, pref_dropped = 0;
int llc_warmup_flag = 0;
uint64_t l2_mpki = 0;

void CACHE::llc_prefetcher_initialize() 
{

}

uint32_t CACHE::llc_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in, float l2c_mpki)
{
	if(warmup_complete[cpu] && (llc_warmup_flag == 0))
	{
		operated_count_warmup = operated_count;
		stopped_at_half_count_warmup = stopped_at_half_count;
		prefetches_made_warmup = prefetches_made;
		operated_count = 0;
		stopped_at_half_count = 0;
		prefetches_made = 0;
		pref_dropped = 0;
		llc_warmup_flag = 1;
	}


	if(type != 6 || metadata_in > 50 || l2c_mpki < 15)	//L2 MPKI threshold		// SPP accuracy threshold - 50)
		return metadata_in;

	//int reg_pref_flag = (metadata_in >> 12) & 1;

	//if(reg_pref_flag == 0)
	//	return metadata_in;	

	//int start_index, end_index;
	//start_index = metadata_in & REGION_OFFSET_MASK;
	//end_index = (metadata_in >> NUM_OF_REGION_OFFSET_BITS) & REGION_OFFSET_MASK;

	//assert(start_index > -1 && end_index < NUM_OF_LINES_IN_REGION);
	
	//if(((metadata_in >> 17) & 1) == 1)
	//	first_or_second_half = 1;
	//else if(((metadata_in >> 18) & 1) == 1)
	//	first_or_second_half = 2;

	int stride = 1;		//decode_stride(metadata_in);
	int degree = 32;	//decode_degree(metadata_in);
	
	//if(first_or_second_half == 0)
        //        return metadata_in;
	//cout << "Decoded stride: " << stride << ", degree: " << degree << endl;
//	cout << "Decoded half: " << first_or_second_half << endl;
	
	uint64_t cl_addr = addr >> LOG2_REGION_SIZE;
	cl_addr = cl_addr << (LOG2_REGION_SIZE - LOG2_BLOCK_SIZE);
	uint64_t pf_address;

	//if(first_or_second_half == 1)
	//	cl_addr = cl_addr << NUM_OF_REGION_OFFSET_BITS;
	//else
	//	cl_addr = (cl_addr << NUM_OF_REGION_OFFSET_BITS) | (0x10);

	operated_count++;

	//cout <<" In for loop L2" << endl;
	for(int i = 1; i <= degree; i++)
	{
		pf_address = (cl_addr + i) << LOG2_BLOCK_SIZE;
		if((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
		{
			if(i <= (degree/2))
				stopped_at_half_count++;
			break;
		}
		#ifdef DO_PREF
		//Filtering with Recent Request Filter
		/*    int found_in_filter = 0;
		   for(int i = 0; i < recent_request_filter_llc.size(); i++)
		    {
			    if(recent_request_filter_llc[i] == ((pf_address >> 6) & RR_TAG_MASK))
			    {
				// Prefetch address is present in RR filter
				found_in_filter = 1;
			    }
		    }
		    //Issue prefetch request only if prefetch address is not present in RR filter
		    if(found_in_filter == 0)
		    {*/
			prefetches_made++;
			if(!prefetch_line(ip, addr, pf_address, FILL_LLC, 0))
				pref_dropped++;	
			//Add to RR filter
		/*	recent_request_filter_llc.push_back((pf_address >> 6) & RR_TAG_MASK);
			if(recent_request_filter_llc.size() > NUM_OF_RR_ENTRIES)
				recent_request_filter_llc.erase(recent_request_filter_llc.begin());
		    }*/
		#endif
	}
	return metadata_in;
}


uint32_t CACHE::llc_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
  return metadata_in;
}

void CACHE::llc_prefetcher_final_stats()
{
	cout << endl << "Piggybacking operated count: " << operated_count << endl;
	cout << "Piggybacking stopped at half count: "<< stopped_at_half_count << endl;
	cout << "Piggybacking prefetches requested: " << prefetches_made << endl;
	cout << endl << "Piggybacking operated warmup count: " << operated_count_warmup << endl;
        cout << "Piggybacking stopped at half warmup count: "<< stopped_at_half_count_warmup << endl;
        cout << "Piggybacking prefetches warmup requested: " << prefetches_made_warmup << endl;
	cout << " RR Filter LLC Size: " << recent_request_filter_llc.size() << endl;
	cout << " Prefetches dropped: " << pref_dropped << endl;
}
