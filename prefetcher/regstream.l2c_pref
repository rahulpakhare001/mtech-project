#include "cache.h"
#include <vector>

#define DO_PREF
//#define NUM_OF_STRIDE_BITS 7

#define LOG2_REGION_SIZE 11
#define NUM_OF_REGION_OFFSET_BITS 5

#define NUM_OF_RR_ENTRIES 32				    // recent request filter entries
#define RR_TAG_MASK 0xFFF				    // 12 bits of prefetch line address are stored in recent request filter

vector<uint64_t> recent_request_filter_l2;		// to filter redundant prefetch requests 

uint64_t prefetches_made = 0, operated_count = 0, stopped_at_half_count = 0;
uint64_t prefetches_made_warmup = 0, operated_count_warmup = 0, stopped_at_half_count_warmup = 0;
int l2_warmup_flag = 0;

/*int decode_stride(uint32_t metadata){
    int stride=0;
    if(metadata & 0b1000000)
        stride = -1*(metadata & 0b111111);
    else
        stride = metadata & 0b111111;

    return stride;
}

int decode_degree(uint32_t metadata){
	int degree = (metadata >> NUM_OF_STRIDE_BITS) & ((1 << 5) - 1);
	return degree;
}*/

void CACHE::l2c_prefetcher_initialize() 
{

}

uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{

	if(warmup_complete[cpu] && (l2_warmup_flag == 0))
	{
		operated_count_warmup = operated_count;
		stopped_at_half_count_warmup = stopped_at_half_count;
		prefetches_made_warmup = prefetches_made;
		operated_count = 0;
		stopped_at_half_count = 0;
		prefetches_made = 0;
		l2_warmup_flag = 1;
	}


	int first_or_second_half = 0;
	
	if(((metadata_in >> 17) & 1) == 1)
		first_or_second_half = 1;
	else if(((metadata_in >> 18) & 1) == 1)
		first_or_second_half = 2;

	int stride = 1;		//decode_stride(metadata_in);
	int degree = 16;	//decode_degree(metadata_in);
	if(first_or_second_half == 0)
                return metadata_in;
	//cout << "Decoded stride: " << stride << ", degree: " << degree << endl;
//	cout << "Decoded half: " << first_or_second_half << endl;
	uint64_t cl_addr = addr >> LOG2_REGION_SIZE;
	uint64_t pf_address;

	if(first_or_second_half == 1)
		cl_addr = cl_addr << NUM_OF_REGION_OFFSET_BITS;
	else
		cl_addr = (cl_addr << NUM_OF_REGION_OFFSET_BITS) | (0x10);

	operated_count++;

	//cout <<" In for loop L2" << endl;
	for(int i = 1; i <= degree; i++)
	{
		pf_address = (cl_addr + (i*stride)) << LOG2_BLOCK_SIZE;
		if((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
		{
			if(i <= (degree/2))
				stopped_at_half_count++;
			break;
		}
		#ifdef DO_PREF
		//Filtering with Recent Request Filter
		    int found_in_filter = 0;
		    for(int i = 0; i < recent_request_filter_l2.size(); i++)
		    {
			    if(recent_request_filter_l2[i] == ((pf_address >> 6) & RR_TAG_MASK))
			    {
				// Prefetch address is present in RR filter
				found_in_filter = 1;
			    }
		    }
		    //Issue prefetch request only if prefetch address is not present in RR filter
		    if(found_in_filter == 0)
		    {
			prefetches_made++;
			prefetch_line(ip, addr, pf_address, FILL_L2, 0);
			//Add to RR filter
			recent_request_filter_l2.push_back((pf_address >> 6) & RR_TAG_MASK);
			if(recent_request_filter_l2.size() > NUM_OF_RR_ENTRIES)
				recent_request_filter_l2.erase(recent_request_filter_l2.begin());
		    }
		#endif
	}
	//cout <<" Exiting for loop L2" << endl;

  return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
  return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats()
{
	cout << endl << "Piggybacking operated count: " << operated_count << endl;
	cout << "Piggybacking stopped at half count: "<< stopped_at_half_count << endl;
	cout << "Piggybacking prefetches requested: " << prefetches_made << endl;
	cout << endl << "Piggybacking operated warmup count: " << operated_count_warmup << endl;
        cout << "Piggybacking stopped at half warmup count: "<< stopped_at_half_count_warmup << endl;
        cout << "Piggybacking prefetches warmup requested: " << prefetches_made_warmup << endl;
}
